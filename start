#!/bin/bash

# Resource Scheduler Application Launcher
# Usage: ./start [start|restart|stop|install]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a process is running
is_process_running() {
    pgrep -f "$1" > /dev/null 2>&1
}

# Function to stop all application processes
stop_app() {
    print_status "Stopping application processes..."
    
    # Stop backend
    if is_process_running "node index.js"; then
        pkill -f "node index.js" || true
        print_success "Backend stopped"
    else
        print_warning "Backend was not running"
    fi
    
    # Stop frontend
    if is_process_running "vite"; then
        pkill -f "vite" || true
        print_success "Frontend stopped"
    else
        print_warning "Frontend was not running"
    fi
    
    # Wait a moment for processes to fully stop
    sleep 2
}

# Function to install dependencies
install_deps() {
    print_status "Installing all dependencies..."
    
    # Install root dependencies
    if [ -f "package.json" ]; then
        npm install
        print_success "Root dependencies installed"
    fi
    
    # Install backend dependencies
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        cd backend
        npm install
        cd ..
        print_success "Backend dependencies installed"
    fi
    
    # Install frontend dependencies
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        cd frontend
        npm install
        cd ..
        print_success "Frontend dependencies installed"
    fi
}

# Function to start the application
start_app() {
    print_status "Starting Resource Scheduler application..."
    
    # Check if processes are already running
    if is_process_running "node index.js" || is_process_running "vite"; then
        print_warning "Application appears to be already running"
        print_status "Use './start restart' to restart the application"
        return 1
    fi
    
    # Start the application using npm scripts
    npm start &
    
    # Wait a moment for processes to start
    sleep 3
    
    # Check if processes started successfully
    if is_process_running "node index.js" && is_process_running "vite"; then
        print_success "Application started successfully!"
        print_status "Backend: http://localhost:3000"
        print_status "Frontend: http://localhost:5173"
        print_status "Press Ctrl+C to stop the application"
        
        # Keep the script running and show logs
        wait
    else
        print_error "Failed to start application"
        return 1
    fi
}

# Function to restart the application
restart_app() {
    print_status "Restarting Resource Scheduler application..."
    stop_app
    sleep 2
    start_app
}

# Main script logic
case "${1:-start}" in
    "start")
        start_app
        ;;
    "restart")
        restart_app
        ;;
    "stop")
        stop_app
        print_success "Application stopped"
        ;;
    "install")
        install_deps
        print_success "All dependencies installed"
        ;;
    "help"|"-h"|"--help")
        echo "Resource Scheduler Application Launcher"
        echo ""
        echo "Usage: ./start [COMMAND]"
        echo ""
        echo "Commands:"
        echo "  start     Start the application (default)"
        echo "  restart   Restart the application"
        echo "  stop      Stop the application"
        echo "  install   Install all dependencies"
        echo "  help      Show this help message"
        echo ""
        echo "Examples:"
        echo "  ./start        # Start the application"
        echo "  ./start restart # Restart the application"
        echo "  ./start stop   # Stop the application"
        ;;
    *)
        print_error "Unknown command: $1"
        echo "Use './start help' for usage information"
        exit 1
        ;;
esac 